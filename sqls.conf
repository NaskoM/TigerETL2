
Ð°ggregation {

  timeToAggSample = """
--DECLARE
--  PRAGMA AUTONOMOUS_TRANSACTION;
BEGIN
INSERT INTO ANALYTICS.DATA_SET
WITH

rgan AS
(SELECT
    --PK
    ba.flowcell_barcode,
    ba.lane,
    decode(ba.molecular_barcode_name, 'N/A', 'NULL', ba.molecular_barcode_name)  molecular_barcode_name
    --
FROM metrics.basecalling_analysis/*DBLINK*/ ba
WHERE
    ba.metrics_type IN ('Indexed', 'Unindexed')
    AND greatest(ba.modified_at, ba.workflow_end_date) >= ?
    AND greatest(ba.modified_at, ba.workflow_end_date) < ?

UNION
SELECT
    --PK
    pa.flowcell_barcode,
    pa.lane,
    decode(pa.molecular_barcode_name, 'N/A', 'NULL', pa.molecular_barcode_name)  molecular_barcode_name
    --
FROM metrics.picard_analysis/*DBLINK*/ pa
WHERE
    pa.metrics_type IN ('Indexed', 'Unindexed')
    AND pa.library_name <> 'Solexa-IC'
    AND greatest(pa.modified_at, pa.workflow_end_date) >= ?
    AND greatest(pa.modified_at, pa.workflow_end_date) < ?
)

SELECT ?, a.SAMPLE FROM metrics.aggregation/*DBLINK*/ a
   WHERE a.LIBRARY IS NULL
     AND nvl(a.modified_at, a.workflow_end_date) >= ?
     AND nvl(a.modified_at, a.workflow_end_date) < ?

UNION

SELECT ?, rgmd.collaborator_sample_id
FROM rgan
JOIN COGNOS.slxre_readgroup_metadata rgmd ON
        rgmd.flowcell_barcode           = rgan.flowcell_barcode AND
        rgmd.lane                       = rgan.lane             AND
        (rgmd.molecular_indexing_scheme = rgan.molecular_barcode_name
         OR rgmd.is_greedy = 1)
WHERE  rgmd.collaborator_sample_id NOT IN ('K-562', 'NA12878')  -- these are some kind of control samples and they are aggregated under many projects
;
COMMIT ;
END;
"""

  sampleAggregation = """
MERGE INTO COGNOS.slxre2_pagg_sample tr
USING (
WITH

agg AS (
SELECT a.*
FROM metrics.aggregation/*DBLINK*/ a
JOIN analytics.data_set ds ON ds.DATA = a.SAMPLE
WHERE ds.id = ? AND a.LIBRARY IS NULL
),

target_rg AS (
SELECT
    --PK
    target_agg.project, target_agg.SAMPLE, target_agg.data_type, target_agg.version,
    rg.flowcell_barcode,
    rg.lane,
    rg.molecular_barcode_name,

    --UK: target_agg.id, flowcell, lane, barcode
    target_agg.id,
    rg.library_name

FROM agg target_agg
JOIN metrics.aggregation_read_group/*DBLINK*/ rg ON rg.aggregation_id = target_agg.id
),

align AS (
SELECT al.aggregation_id,
    MAX(DECODE(CATEGORY, 'PAIR', al.total_reads                     )) ap_total_reads,
    MAX(DECODE(CATEGORY, 'PAIR', al.pf_reads                        )) ap_pf_reads,
    MAX(DECODE(CATEGORY, 'PAIR', al.pct_pf_reads                    )) ap_pct_pf_reads,
    MAX(DECODE(CATEGORY, 'PAIR', al.pf_noise_reads                  )) ap_pf_noise_reads,
    MAX(DECODE(CATEGORY, 'PAIR', al.pf_reads_aligned                )) ap_pf_reads_aligned,
    MAX(DECODE(CATEGORY, 'PAIR', al.pct_pf_reads_aligned            )) ap_pct_pf_reads_aligned,
    MAX(DECODE(CATEGORY, 'PAIR', al.pf_hq_aligned_reads             )) ap_pf_hq_aligned_reads,
    MAX(DECODE(CATEGORY, 'PAIR', al.pf_hq_aligned_bases             )) ap_pf_hq_aligned_bases,
    MAX(DECODE(CATEGORY, 'PAIR', al.pf_hq_aligned_q20_bases         )) ap_pf_hq_aligned_q20_bases,
    MAX(DECODE(CATEGORY, 'PAIR', al.pf_hq_median_mismatches         )) ap_pf_hq_median_mismatches,
    MAX(DECODE(CATEGORY, 'PAIR', al.pf_hq_error_rate                )) ap_pf_hq_error_rate,
    MAX(DECODE(CATEGORY, 'PAIR', al.mean_read_length                )) ap_mean_read_length,
    MAX(DECODE(CATEGORY, 'PAIR', al.reads_aligned_in_pairs          )) ap_reads_aligned_in_pairs,
    MAX(DECODE(CATEGORY, 'PAIR', al.pct_reads_aligned_in_pairs      )) ap_pct_reads_aligned_in_pairs,
    MAX(DECODE(CATEGORY, 'PAIR', al.bad_cycles                      )) ap_bad_cycles,
    MAX(DECODE(CATEGORY, 'PAIR', al.strand_balance                  )) ap_pct_strand_balance,
    MAX(DECODE(CATEGORY, 'PAIR', al.pct_adapter                     )) ap_pct_adapter,
    MAX(DECODE(CATEGORY, 'PAIR', al.pf_aligned_bases                )) ap_pf_aligned_bases,
    MAX(DECODE(CATEGORY, 'PAIR', al.pf_mismatch_rate                )) ap_pf_mismatch_rate,
    MAX(DECODE(CATEGORY, 'PAIR', al.pct_chimeras                    )) ap_pct_chimeras,
    MAX(DECODE(CATEGORY, 'PAIR', al.pf_indel_rate                    )) ap_pf_indel_rate,

    MAX(DECODE(CATEGORY, 'UNPAIRED', al.total_reads                 )) anp_total_reads,
    MAX(DECODE(CATEGORY, 'UNPAIRED', al.pf_reads                    )) anp_pf_reads,
    MAX(DECODE(CATEGORY, 'UNPAIRED', al.pct_pf_reads                )) anp_pct_pf_reads,
    MAX(DECODE(CATEGORY, 'UNPAIRED', al.pf_noise_reads              )) anp_pf_noise_reads,
    MAX(DECODE(CATEGORY, 'UNPAIRED', al.pf_reads_aligned            )) anp_pf_reads_aligned,
    MAX(DECODE(CATEGORY, 'UNPAIRED', al.pct_pf_reads_aligned        )) anp_pct_pf_reads_aligned,
    MAX(DECODE(CATEGORY, 'UNPAIRED', al.pf_hq_aligned_reads         )) anp_pf_hq_aligned_reads,
    MAX(DECODE(CATEGORY, 'UNPAIRED', al.pf_hq_aligned_bases         )) anp_pf_hq_aligned_bases,
    MAX(DECODE(CATEGORY, 'UNPAIRED', al.pf_hq_aligned_q20_bases     )) anp_pf_hq_aligned_q20_bases,
    MAX(DECODE(CATEGORY, 'UNPAIRED', al.pf_hq_median_mismatches     )) anp_pf_hq_median_mismatches,
    MAX(DECODE(CATEGORY, 'UNPAIRED', al.pf_hq_error_rate            )) anp_pf_hq_error_rate,
    MAX(DECODE(CATEGORY, 'UNPAIRED', al.mean_read_length            )) anp_mean_read_length,
    MAX(DECODE(CATEGORY, 'UNPAIRED', al.reads_aligned_in_pairs      )) anp_reads_aligned_in_pairs,
    MAX(DECODE(CATEGORY, 'UNPAIRED', al.pct_reads_aligned_in_pairs  )) anp_pct_reads_aligned_in_pairs,
    MAX(DECODE(CATEGORY, 'UNPAIRED', al.bad_cycles                  )) anp_bad_cycles,
    MAX(DECODE(CATEGORY, 'UNPAIRED', al.strand_balance              )) anp_pct_strand_balance,
    MAX(DECODE(CATEGORY, 'UNPAIRED', al.pct_adapter                 )) anp_pct_adapter,
    MAX(DECODE(CATEGORY, 'UNPAIRED', al.pf_aligned_bases            )) anp_pf_aligned_bases,
    MAX(DECODE(CATEGORY, 'UNPAIRED', al.pf_mismatch_rate            )) anp_pf_mismatch_rate,
    MAX(DECODE(CATEGORY, 'UNPAIRED', al.pf_indel_rate               )) anp_pf_indel_rate

-- there are no anp_pct_chimeras because chimerism is when  both ends are in different chromosomes => pct chimeras does not apply to UNPAIRED reads
FROM metrics.aggregation_alignment/*DBLINK*/ al
JOIN agg ON agg.id=al.aggregation_id
WHERE category IN ('PAIR', 'UNPAIRED')

GROUP BY al.aggregation_id
),

ins AS (
SELECT
-- PK: aggregation_id, pair_orientation
    ins.*,
    ROW_NUMBER() over (PARTITION BY ins.aggregation_id ORDER BY ins.read_pairs desc) read_pair_rank
FROM metrics.aggregation_insert_size/*DBLINK*/ ins
JOIN agg ON agg.id=ins.aggregation_id
),

metadata AS (
SELECT
    --PK
    rg.Id sample_agg_id,
    --
    --UK
    rg.project,
    rg.SAMPLE,
    rg.data_type,
    rg.version,
    --
    cognos.concat_string_csv(DISTINCT rgmd.product_order_key      ) product_order_key,
    cognos.concat_string_csv(DISTINCT rgmd.product                ) product,
    cognos.concat_string_csv(DISTINCT rgmd.product_part_number    ) product_part_number,
    cognos.concat_string_csv(DISTINCT rgmd.product_order_sample   ) product_order_sample,
    cognos.concat_string_csv(DISTINCT rgmd.lab_workflow           ) lab_workflow,
    cognos.concat_string_csv(DISTINCT rgmd.analysis_type          ) analysis_type,

    cognos.concat_string_csv(DISTINCT rgmd.lcset                  ) lcset,
    cognos.concat_string_csv(DISTINCT jira.type                   ) lcset_type,
    cognos.concat_string_csv(DISTINCT jira.protocol               ) lcset_protocol,
    cognos.concat_string_csv(DISTINCT jira.seq_technology         ) lcset_seq_technology,
    cognos.concat_string_csv(DISTINCT jira.topoffs                ) lcset_topoff,
    max(jira.created                                       ) lcset_creation_max,
    cognos.concat_string_csv(DISTINCT rgmd.research_project_name  ) research_project_name ,
    cognos.concat_string_csv(DISTINCT rgmd.research_project_id    ) research_project_number,
    cognos.concat_string_csv(DISTINCT rgmd.initiative             ) initiative,

    cognos.concat_string_csv(DISTINCT rgmd.sample_id              ) sample_ids,
    cognos.concat_string_csv(DISTINCT rgmd.lsid                   ) lsid,
    'Archived column'                                        root_lsid,
    'Archived column'                                        collection,

    decode(count(DISTINCT rgmd.collaborator_participant_id), 1, max(rgmd.collaborator_participant_id), 'Multiple')  individual_name,
    decode(count(DISTINCT pdos.on_risk), 1, min(pdos.on_risk), 0, 'N/A', 'T')                                       on_risk,  -- if sample is duplacted in PDO at least one of its positions is deemed on risk, then we call it on risk
    cognos.concat_string_csv(DISTINCT pdos.risk_types)                                                                     risk_types,
    COUNT(DISTINCT rg.flowcell_barcode ||'/'||rg.lane)                                                              n_lanes,
    cognos.concat_string_csv(DISTINCT rg.flowcell_barcode ||'/'||rg.lane)                                                  lanes,
    count(DISTINCT rg.flowcell_barcode ||'/'||rg.lane||'/'||rg.library_name)                                        n_rg,
    sum(rgmd.is_pool_test)                                                                                          n_hiseq_pool_test_lanes,

    cognos.concat_string_csv(DISTINCT rgmd.work_request_id ) wr_id,
    cognos.concat_string_csv(DISTINCT rgmd.gssr_barcodes ) gssr_ids,  -- needed for Seq Only product !!!
    --max(rgmd.work_request_id) keep (dense_rank first ORDER BY rgmd.run_date) over (PARTITION BY agg.id) last_wr_sequenced,
    MAX(r.run_end_date) last_run_end_date,

    cognos.concat_string_csv(DISTINCT pdo.title      ) pdo_title,
    cognos.concat_string_csv(DISTINCT sa.o_material_type_name  ) bsp_original_material_type,
    cognos.concat_string_csv(DISTINCT saroot.material_type_name) bsp_root_material_type,
    cognos.concat_string_csv(DISTINCT sa.sample_type            ) bsp_sample_type,
    cognos.concat_string_csv(DISTINCT
    CASE
        WHEN instr(nvl(rgmd.setup_read_structure, rgmd.actual_read_structure), '8B8B')>0 THEN 'Dual'
        ELSE 'Single'
    END)       index_type




FROM target_rg rg
--metrics.aggregation_read_group/*DBLINK*/ rg
--JOIN agg ON agg.id = rg.aggregation_id --AND agg.is_latest <> 0   --=1

JOIN COGNOS.slxre2_organic_run r ON r.flowcell_barcode = rg.flowcell_barcode --  AND r.is_cancelled = 0  -- commented to include cancelled but aggregated runs

JOIN COGNOS.slxre_readgroup_metadata rgmd ON
    rgmd.flowcell_barcode           = rg.flowcell_barcode AND
    rgmd.lane                       = rg.lane             AND
    (rgmd.molecular_indexing_scheme = NVL(rg.molecular_barcode_name, 'NULL') OR rgmd.is_greedy = 1)

    /* Not needed and RP aggs are done for non Exome
    AND

    CASE WHEN (substr(rg.project, 1, 3)= 'RP-' AND nvl(rgmd.data_type, 'Exome') = rg.data_type )  -- RPT-2197 rgmd.data_type is null for 22 aggregated runs
                OR substr(rg.project, 1, 3)<> 'RP-'
        THEN 1
        ELSE 0
    END =1
    */
LEFT JOIN mercurydwro.product_order pdo ON pdo.jira_ticket_key = rgmd.product_order_key
LEFT JOIN mercurydwro.product_order_sample pdos ON pdos.product_order_id = pdo.product_order_id AND pdos.sample_name = rgmd.product_order_sample
LEFT JOIN jiradwh.loj_issue_lcset@loj_LINK.seqbldr jira ON jira.KEY = rgmd.lcset

LEFT JOIN analytics.bsp_sample sa ON sa.sample_id=substr(rgmd.product_order_sample, 4)
LEFT JOIN analytics.bsp_sample saroot ON saroot.sample_id=sa.root_sample_id

--LEFT JOIN sample_attribute_bsp@analytics.gap_prod sa ON sa.sample_id=substr(rgmd.product_order_sample, 4)
--LEFT JOIN sample_attribute_bsp@analytics.gap_prod saroot ON saroot.sample_id=sa.root_sample_id

WHERE NVL(rgmd.setup_read_structure, 'NULL') NOT IN ('8B', '8T', '8B8B')
GROUP BY rg.id, rg.project, rg.SAMPLE, rg.data_type, rg.version
),

fcl_isgreedy AS
(SELECT -- PK: flowcell_barcode, lane
    DISTINCT rgmd.flowcell_barcode, rgmd.lane,
    --
    rgmd.is_greedy
FROM COGNOS.slxre_readgroup_Metadata rgmd
JOIN target_rg ON target_rg.flowcell_barcode=rgmd.flowcell_barcode AND target_rg.lane=rgmd.lane
),

bc AS (
SELECT
    --PK
    target_rg.Id sample_agg_id,
    --
    sum(bcm.pf_reads)     bc_pf_reads,
    sum(bcm.total_reads)  bc_total_reads,
    sum(bcm.pf_bases)     bc_pf_bases

FROM target_rg
--metrics.aggregation_read_group/*DBLINK*/ rg
--JOIN agg ON agg.id = rg.aggregation_id AND agg.is_latest<>0  -- =1

JOIN fcl_isgreedy ON
    fcl_isgreedy.flowcell_barcode   = target_rg.flowcell_barcode AND
    fcl_isgreedy.lane               = target_rg.lane

JOIN metrics.basecalling_analysis/*DBLINK*/ ba ON
    ba.flowcell_barcode       = target_rg.flowcell_barcode       AND
    ba.lane                   = target_rg.lane                   AND
    (CASE
        WHEN ba.molecular_barcode_name = NVL(target_rg.molecular_barcode_name, 'N/A') OR fcl_isgreedy.is_greedy =1 THEN 1
        ELSE 0
    END) = 1 AND
    ba.metrics_type IN ('Indexed', 'Unindexed')
JOIN metrics.basecalling_metrics/*DBLINK*/ bcm ON bcm.basecalling_analysis_id = ba.id
GROUP BY target_rg.id
),

fp AS (
SELECT
    --PK
    target_rg.Id sample_agg_id,
    --
    min(fp.lod_expected_sample)  min_lod,
    max(fp.lod_expected_sample)  max_lod

FROM target_rg
--metrics.aggregation_read_group/*DBLINK*/ rg
--JOIN agg ON agg.id = rg.aggregation_id AND agg.is_latest<>0  -- =1

JOIN fcl_isgreedy ON
    fcl_isgreedy.flowcell_barcode   = target_rg.flowcell_barcode AND
    fcl_isgreedy.lane               = target_rg.lane

JOIN metrics.picard_analysis/*DBLINK*/ pa ON
    pa.flowcell_barcode       = target_rg.flowcell_barcode       AND
    pa.lane                   = target_rg.lane                   AND
    (CASE
        WHEN pa.molecular_barcode_name = NVL(target_rg.molecular_barcode_name, 'N/A') OR fcl_isgreedy.is_greedy=1 THEN 1
        ELSE 0
    END) = 1 AND
    pa.metrics_type IN ('Indexed', 'Unindexed')
JOIN metrics.picard_fingerprint/*DBLINK*/ fp ON fp.picard_analysis_id = pa.id
WHERE pa.library_name <> 'Solexa-IC'
GROUP BY target_rg.id
)

SELECT
    -- PK
    agg.project,
    agg.SAMPLE,
    agg.data_type,
    --

    agg.processing_location,
    metadata.product_order_key,
    metadata.product,
    metadata.product_part_number,
    metadata.product_order_sample,
    metadata.research_project_name ,
    metadata.research_project_number,
    metadata.individual_name,


    metadata.on_risk,
    metadata.risk_types,
    metadata.sample_ids ,
    metadata.lsid,
    metadata.lcset,
    metadata.lcset_type,
    metadata.lcset_protocol,
    metadata.lcset_seq_technology,
    metadata.lcset_topoff,
    metadata.lab_workflow workflow,
    metadata.analysis_type,

    agg.id                  analysis_id,
    agg.workflow_start_date analysis_start,
    agg.workflow_end_date   analysis_end,
    agg.version             version,
    metadata.n_lanes        n_lanes,
    metadata.lanes          aggregated_lanes,
    metadata.wr_id,
    metadata.gssr_ids,  -- needed for Seq Only product !!!
    metadata.last_run_end_date,
    metadata.bsp_original_material_type,
    metadata.bsp_root_material_type,


    ---Align metrics from both(Paired and Unpaired) lanes
    NVL(ap_total_reads            ,0)+NVL(anp_total_reads            ,0) al_total_reads,
    NVL(ap_pf_reads               ,0)+NVL(anp_pf_reads               ,0) al_pf_reads,
    NVL(ap_pf_noise_reads         ,0)+NVL(anp_pf_noise_reads         ,0) al_pf_noise_reads,
    NVL(ap_pf_reads_aligned       ,0)+NVL(anp_pf_reads_aligned       ,0) al_pf_reads_aligned,
    NVL(ap_pf_hq_aligned_reads    ,0)+NVL(anp_pf_hq_aligned_reads    ,0) al_pf_hq_aligned_reads,
    NVL(ap_pf_hq_aligned_bases    ,0)+NVL(anp_pf_hq_aligned_bases    ,0) al_pf_hq_aligned_bases,
    NVL(ap_pf_hq_aligned_q20_bases,0)+NVL(anp_pf_hq_aligned_q20_bases,0) al_pf_hq_aligned_q20_bases,
    100*decode(nvl(ap_pf_reads, 0)+nvl(anp_pf_reads, 0), 0, 0,
      (nvl(ap_pf_reads * ap_pct_adapter, 0) + nvl(anp_pf_reads * anp_pct_adapter, 0))/(nvl(ap_pf_reads, 0)+nvl(anp_pf_reads, 0))
    ) al_pct_adapter,
    NVL(ap_pf_aligned_bases       ,0)+NVL(anp_pf_aligned_bases       ,0) al_pf_aligned_bases,
    NVL(ap_pf_mismatch_rate       ,0)+NVL(anp_pf_mismatch_rate       ,0) al_pf_mismatch_rate,
    100*  ap_pct_chimeras                                                      al_pct_chimeras,  -- there are no anp_pct_chimeras because chimerism is when  both ends are in different chromosomes => pct chimeras does not apply to UNPAIRED reads

    ---Align Paired metrics
    al.AP_BAD_CYCLES,
    al.AP_MEAN_READ_LENGTH,
    100*al.AP_PCT_PF_READS                 AP_PCT_PF_READS,
    100*al.AP_PCT_PF_READS_ALIGNED         AP_PCT_PF_READS_ALIGNED,
    100*al.AP_PCT_READS_ALIGNED_IN_PAIRS   AP_PCT_READS_ALIGNED_IN_PAIRS,
    100*al.AP_PCT_STRAND_BALANCE           AP_PCT_STRAND_BALANCE,
    al.AP_PF_HQ_ALIGNED_BASES,
    al.AP_PF_HQ_ALIGNED_Q20_BASES,
    al.AP_PF_HQ_ALIGNED_READS,
    al.AP_PF_HQ_MEDIAN_MISMATCHES,
    al.ap_pf_hq_error_rate,
    al.AP_PF_NOISE_READS,
    al.AP_PF_READS,
    al.AP_PF_READS_ALIGNED,
    al.AP_READS_ALIGNED_IN_PAIRS,
    al.AP_TOTAL_READS,
    al.AP_PF_ALIGNED_BASES,
    al.AP_PF_MISMATCH_RATE,
    100*al.ap_pct_adapter                ap_pct_adapter,

    al.anp_bad_cycles,
    al.anp_mean_read_length,
    100*al.anp_pct_pf_reads              anp_pct_pf_reads,
    100*al.anp_pct_pf_reads_aligned      anp_pct_pf_reads_aligned,
    100*al.anp_pct_reads_aligned_in_pairs  anp_pct_reads_aligned_in_pairs,
    100*al.anp_pct_strand_balance        anp_pct_strand_balance,
    al.anp_pf_hq_aligned_bases,
    al.anp_pf_hq_aligned_q20_bases,
    al.anp_pf_hq_aligned_reads,
    al.anp_pf_hq_median_mismatches,
    al.anp_pf_hq_error_rate,
    al.anp_pf_noise_reads,
    al.anp_pf_reads,
    al.anp_pf_reads_aligned,
    al.anp_reads_aligned_in_pairs,
    al.anp_total_reads,
    al.anp_pf_aligned_bases,
    al.anp_pf_mismatch_rate,
    100*al.anp_pct_adapter       anp_pct_adapter,

----HS Metrics
    hs.PF_READS PF_READS,
    hs.BAIT_DESIGN_EFFICIENCY HS_BAIT_DESIGN_EFFICIENCY,
    hs.BAIT_SET HS_BAIT_SET,
    hs.BAIT_TERRITORY HS_BAIT_TERRITORY,
    hs.FOLD_80_BASE_PENALTY HS_FOLD_80_BASE_PENALTY,
    hs.FOLD_ENRICHMENT HS_FOLD_ENRICHMENT,
    hs.GENOME_SIZE HS_GENOME_SIZE,
    hs.HS_LIBRARY_SIZE,
    hs.MEAN_BAIT_COVERAGE HS_MEAN_BAIT_COVERAGE,
    hs.MEAN_TARGET_COVERAGE HS_MEAN_TARGET_COVERAGE,
    hs.NEAR_BAIT_BASES HS_NEAR_BAIT_BASES,
    hs.OFF_BAIT_BASES HS_OFF_BAIT_BASES,
    hs.ON_BAIT_BASES HS_ON_BAIT_BASES,
    hs.ON_BAIT_VS_SELECTED          HS_ON_BAIT_VS_SELECTED,
    hs.ON_TARGET_BASES              HS_ON_TARGET_BASES,
    100*hs.PCT_OFF_BAIT                 HS_PCT_OFF_BAIT,
    100*hs.PCT_PF_READS                 HS_PCT_PF_READS,
    100*hs.PCT_PF_UQ_READS              HS_PCT_PF_UQ_READS,
    100*hs.PCT_PF_UQ_READS_ALIGNED      HS_PCT_PF_UQ_READS_ALIGNED,
    100*hs.PCT_SELECTED_BASES           HS_PCT_SELECTED_BASES,
    100*hs.PCT_TARGET_BASES_10X         HS_PCT_TARGET_BASES_10X,
    100*hs.PCT_TARGET_BASES_20X         HS_PCT_TARGET_BASES_20X,
    100*hs.PCT_TARGET_BASES_2X          HS_PCT_TARGET_BASES_2X,
    100*hs.PCT_TARGET_BASES_30X         HS_PCT_TARGET_BASES_30X,
    100*hs.pct_target_bases_40x     hs_pct_target_bases_40x,
    100*hs.pct_target_bases_50x     hs_pct_target_bases_50x,
    100*hs.pct_target_bases_100x    hs_pct_target_bases_100x,

    100*hs.PCT_USABLE_BASES_ON_BAIT     HS_PCT_USABLE_BASES_ON_BAIT,
    100*hs.PCT_USABLE_BASES_ON_TARGET   HS_PCT_USABLE_BASES_ON_TARGET,
    hs.PF_UNIQUE_READS              HS_PF_UNIQUE_READS,
    hs.PF_UQ_BASES_ALIGNED          HS_PF_UQ_BASES_ALIGNED,
    hs.PF_UQ_READS_ALIGNED          HS_PF_UQ_READS_ALIGNED,
    hs.TARGET_TERRITORY             HS_TARGET_TERRITORY,
    hs.TOTAL_READS                  HS_TOTAL_READS,
    100*hs.zero_cvg_targets_pct         HS_ZERO_CVG_TARGETS_PCT,
    100*trunc(hs.PCT_TARGET_BASES_20X)  sample_HS_PCT_TARGET_BASES_20X,

---SNP Metrics
    dbsnp.num_in_db_snp SNP_NUM_IN_DBSNP,
    100*dbsnp.PCT_DBSNP     SNP_PCT_DBSNP,
    dbsnp.TOTAL_SNPS    SNP_TOTAL_SNPS,

    metadata.initiative initiative_name,

----  HS Penalty Metrics -- CG added 12/3/2009
    hs.hs_penalty_10x,
    hs.hs_penalty_20x,
    hs.hs_penalty_30x,
    hs.hs_penalty_40x,
    hs.hs_penalty_50x,
    hs.hs_penalty_100x,

    -- RNASeq
    rna.pf_aligned_bases            rna_pf_aligned_bases,
    rna.ribosomal_bases             rna_ribosomal_bases,
    rna.coding_bases                rna_coding_bases,
    rna.utr_bases                   rna_utr_bases,
    rna.intronic_bases              rna_intronic_bases,
    rna.intergenic_bases            rna_intergenic_bases,
    rna.correct_strand_reads        rna_correct_strand_reads,
    rna.incorrect_strand_reads      rna_incorrect_strand_reads,
    100*rna.pct_ribosomal_bases         rna_pct_ribosomal_bases,
    100*rna.pct_coding_bases            rna_pct_coding_bases,
    100*rna.pct_utr_bases               rna_pct_utr_bases,
    100*rna.pct_intronic_bases          rna_pct_intronic_bases,
    100*rna.pct_intergenic_bases        rna_pct_intergenic_bases,
    100*rna.pct_mrna_bases              rna_pct_mrna_bases,
    100*rna.pct_correct_strand_reads    rna_pct_correct_strand_reads,
    rna.pf_bases                    rna_pf_bases,
    100*rna.pct_usable_bases            rna_pct_usable_bases,
    rna.median_cv_coverage          rna_median_cv_coverage,
    rna.median_5prime_bias          rna_median_5prime_bias,
    rna.median_3prime_bias          rna_median_3prime_bias,
    rna.median_5prime_to_3prime_bias  rna_median_5prim_to_3prim_bias,

    --INS
    ins.MEDIAN_INSERT_SIZE  INS_MEDIAN_INSERT_SIZE,
    ins.MIN_INSERT_SIZE     INS_MIN_INSERT_SIZE,
    ins.MAX_INSERT_SIZE     INS_MAX_INSERT_SIZE,
    ins.MEAN_INSERT_SIZE    INS_MEAN_INSERT_SIZE,
    ins.STANDARD_DEVIATION  INS_STANDARD_DEVIATION,
    ins.READ_PAIRS          INS_READ_PAIRS,
    ins.WIDTH_OF_10_PERCENT INS_WIDTH_OF_10_PERCENT,
    ins.WIDTH_OF_20_PERCENT INS_WIDTH_OF_20_PERCENT,
    ins.WIDTH_OF_30_PERCENT INS_WIDTH_OF_30_PERCENT,
    ins.WIDTH_OF_40_PERCENT INS_WIDTH_OF_40_PERCENT,
    ins.WIDTH_OF_50_PERCENT INS_WIDTH_OF_50_PERCENT,
    ins.WIDTH_OF_60_PERCENT INS_WIDTH_OF_60_PERCENT,
    ins.WIDTH_OF_70_PERCENT INS_WIDTH_OF_70_PERCENT,
    ins.WIDTH_OF_80_PERCENT INS_WIDTH_OF_80_PERCENT,
    ins.WIDTH_OF_90_PERCENT INS_WIDTH_OF_90_PERCENT,
    ins.WIDTH_OF_99_PERCENT INS_WIDTH_OF_99_PERCENT,
    ins.pair_orientation    ins_pair_orientation,

-- PCR metrics
    pcr.custom_amplicon_set         pcr_custom_amplicon_set,
    pcr.genome_size                 pcr_genome_size,
    pcr.amplicon_territory          pcr_amplicon_territory,
    pcr.target_territory            pcr_target_territory,
    pcr.total_reads                 pcr_total_reads,
    pcr.pf_reads                    pcr_pf_reads,
    pcr.pf_unique_reads             pcr_pf_unique_reads,
    100*pcr.pct_pf_reads                pcr_pct_pf_reads,
    100*pcr.pct_pf_uq_reads             pcr_pct_pf_uq_reads,
    pcr.pf_uq_reads_aligned         pcr_pf_uq_reads_aligned,
    100*pcr.pct_pf_uq_reads_aligned     pcr_pct_pf_uq_reads_aligned,
    pcr.pf_uq_bases_aligned         pcr_pf_uq_bases_aligned,
    pcr.on_amplicon_bases           pcr_on_amplicon_bases,
    pcr.near_amplicon_bases         pcr_near_amplicon_bases,
    pcr.off_amplicon_bases          pcr_off_amplicon_bases,
    pcr.on_target_bases             pcr_on_target_bases,
    100*pcr.pct_amplified_bases         pcr_pct_amplified_bases,
    100*pcr.pct_off_amplicon            pcr_pct_off_amplicon,
    pcr.on_amplicon_vs_selected     pcr_on_amplicon_vs_selected,
    pcr.mean_amplicon_coverage      pcr_mean_amplicon_coverage,
    pcr.mean_target_coverage        pcr_mean_target_coverage,
    pcr.fold_enrichment             pcr_fold_enrichment,
    100*pcr.zero_cvg_targets_pct        pcr_zero_cvg_targets_pct,
    pcr.fold_80_base_penalty        pcr_fold_80_base_penalty,
    100*pcr.pct_target_bases_2x         pcr_pct_target_bases_2x,
    100*pcr.pct_target_bases_10x        pcr_pct_target_bases_10x,
    100*pcr.pct_target_bases_20x        pcr_pct_target_bases_20x,
    100*pcr.pct_target_bases_30x        pcr_pct_target_bases_30x,
    pcr.at_dropout                  pcr_at_dropout,
    pcr.gc_dropout                  pcr_gc_dropout,
    100*c.PCT_CONTAMINATION             PCT_CONTAMINATION,

-- RRBS metrics -- from new schema
    rrbs_agg.reads_aligned                  rrbs_reads_aligned,
    rrbs_agg.non_cpg_bases                  rrbs_non_cpg_bases,
    rrbs_agg.non_cpg_converted_bases        rrbs_non_cpg_converted_bases,
    100*rrbs_agg.pct_non_cpg_bases_converted    rrbs_pct_noncpg_bases_convertd,
    rrbs_agg.cpg_bases_seen                 rrbs_cpg_bases_seen,
    rrbs_agg.cpg_bases_converted            rrbs_cpg_bases_converted,
    100*rrbs_agg.pct_cpg_bases_converted        rrbs_pct_cpg_bases_converted,
    rrbs_agg.mean_cpg_coverage              rrbs_mean_cpg_coverage,
    rrbs_agg.median_cpg_coverage            rrbs_median_cpg_coverage,
    rrbs_agg.reads_with_no_cpg              rrbs_reads_with_no_cpg,
    rrbs_agg.reads_ignored_short            rrbs_reads_ignored_short,
    rrbs_agg.reads_ignored_mismatches       rrbs_reads_ignored_mismatches,

    bc_pf_reads,
    bc_total_reads,
    bc_pf_bases,

    -- WGS
    wgs.genome_territory        wgs_genome_territory,
    wgs.mean_coverage           wgs_mean_coverage ,
    wgs.sd_coverage             wgs_sd_coverage,
    wgs.median_coverage         wgs_median_coverage,
    wgs.mad_coverage            wgs_mad_coverage,
    100*wgs.pct_exc_mapq        wgs_pct_exc_mapq ,
    100*wgs.pct_exc_dupe        wgs_pct_exc_dupe,
    100*wgs.pct_exc_unpaired    wgs_pct_exc_unpaired   ,
    100*wgs.pct_exc_baseq       wgs_pct_exc_baseq ,
    100*wgs.pct_exc_overlap     wgs_pct_exc_overlap,
    100*wgs.pct_exc_capped      wgs_pct_exc_capped ,
    100*wgs.pct_exc_total       wgs_pct_exc_total,
    100*wgs.pct_5x              wgs_pct_5x,
    100*wgs.pct_10x             wgs_pct_10x,
    100*wgs.pct_20x             wgs_pct_20x,
    100*wgs.pct_30x             wgs_pct_30x,
    100*wgs.pct_40x             wgs_pct_40x,
    100*wgs.pct_50x             wgs_pct_50x,
    100*wgs.pct_60x             wgs_pct_60x,
    100*wgs.pct_70x             wgs_pct_70x,
    100*wgs.pct_80x             wgs_pct_80x,
    100*wgs.pct_90x             wgs_pct_90x,
    100*wgs.pct_100x            wgs_pct_100x,
    100*wgs.pct_15x             wgs_pct_15x,
    100*wgs.pct_25x             wgs_pct_25x,

    -- Raw WGS
    rwgs.genome_territory        rwgs_genome_territory,
    rwgs.mean_coverage           rwgs_mean_coverage ,
    rwgs.sd_coverage             rwgs_sd_coverage,
    rwgs.median_coverage         rwgs_median_coverage,
    rwgs.mad_coverage            rwgs_mad_coverage,
    100*rwgs.pct_exc_mapq        rwgs_pct_exc_mapq ,
    100*rwgs.pct_exc_dupe        rwgs_pct_exc_dupe,
    100*rwgs.pct_exc_unpaired    rwgs_pct_exc_unpaired   ,
    100*rwgs.pct_exc_baseq       rwgs_pct_exc_baseq ,
    100*rwgs.pct_exc_overlap     rwgs_pct_exc_overlap,
    100*rwgs.pct_exc_capped      rwgs_pct_exc_capped ,
    100*rwgs.pct_exc_total       rwgs_pct_exc_total,
    100*rwgs.pct_5x              rwgs_pct_5x,
    100*rwgs.pct_10x             rwgs_pct_10x,
    100*rwgs.pct_20x             rwgs_pct_20x,
    100*rwgs.pct_30x             rwgs_pct_30x,
    100*rwgs.pct_40x             rwgs_pct_40x,
    100*rwgs.pct_50x             rwgs_pct_50x,
    100*rwgs.pct_60x             rwgs_pct_60x,
    100*rwgs.pct_70x             rwgs_pct_70x,
    100*rwgs.pct_80x             rwgs_pct_80x,
    100*rwgs.pct_90x             rwgs_pct_90x,
    100*rwgs.pct_100x            rwgs_pct_100x,
    100*rwgs.pct_15x             rwgs_pct_15x,
    100*rwgs.pct_25x             rwgs_pct_25x,

    fp.min_lod,
    fp.max_lod,
    metadata.pdo_title,
    ap_pf_indel_rate,
    anp_pf_indel_rate,
    metadata.n_hiseq_pool_test_lanes,
    metadata.n_rg n_aggregated_rg,

    100*wgs.pct_1x              wgs_pct_1x,
    100*wgs.het_snp_sensitivity     wgs_het_snp_sensitivity,
    wgs.het_snp_q               wgs_het_snp_q,
    metadata.bsp_sample_type    sample_type,
    metadata.index_type,
    safp.lod_expected_sample sample_lod,
    hs.at_dropout hs_at_dropout,
    metadata.lcset_creation_max,

    agg.is_latest

FROM agg
JOIN metrics.aggregation_hybrid_selection/*DBLINK*/ hs   ON       hs.aggregation_id = agg.id
JOIN align al                                  ON       al.aggregation_id = agg.id
JOIN metrics.aggregation_dbsnp/*DBLINK*/ dbsnp           ON    dbsnp.aggregation_id = agg.id
JOIN ins                                       ON      ins.aggregation_id = agg.id AND read_pair_rank = 1
JOIN metrics.aggregation_rna_seq/*DBLINK*/ rna           ON      rna.aggregation_id = agg.id
JOIN metrics.aggregation_pcr/*DBLINK*/ pcr               ON      pcr.aggregation_id = agg.id
LEFT JOIN metrics.aggregation_rrbs_summary/*DBLINK*/ rrbs_agg ON rrbs_agg.aggregation_id = agg.id
JOIN metrics.aggregation_contam/*DBLINK*/ c              ON        c.aggregation_id = agg.id
LEFT JOIN metrics.aggregation_oxog/*DBLINK*/ oxog        ON     oxog.aggregation_id = agg.id AND oxog.CONTEXT ='CCG'  -- not all aggregations have rows context='CCG'

LEFT JOIN metadata                             ON metadata.sample_agg_id  = agg.id
LEFT JOIN bc                                   ON       bc.sample_agg_id  = agg.id
LEFT JOIN fp                                   ON       fp.sample_agg_id  = agg.id
JOIN metrics.aggregation_wgs/*DBLINK*/ wgs               ON      wgs.aggregation_id = agg.id
LEFT JOIN metrics.aggregation_raw_wgs/*DBLINK*/ rwgs     ON     rwgs.aggregation_id = agg.id
LEFT JOIN metrics.aggregation_fingerprint safp           ON safp.aggregation_id = agg.id
) DELTA

ON (tr.analysis_id=DELTA.analysis_id AND tr.source=? /*SOURCE*/)

WHEN NOT MATCHED THEN
INSERT values(
-- PK
delta.project, delta.sample, delta.data_type,
--
sysdate, --timestamp

delta.product_order_key, delta.product, delta.product_part_number,
delta.product_order_sample, delta.research_project_name, delta.research_project_number,
delta.gssr_ids,
delta.last_run_end_date,

delta.individual_name,
delta.on_risk, delta.risk_types, delta.sample_ids, delta.lsid,
delta.lcset, delta.workflow,
delta.analysis_type,
delta.analysis_id,
delta.analysis_start, delta.analysis_end, delta.version, delta.n_lanes, delta.aggregated_lanes, delta.wr_id,

delta.al_total_reads, delta.al_pf_reads, delta.al_pf_noise_reads, delta.al_pf_reads_aligned,
delta.al_pf_hq_aligned_reads, delta.al_pf_hq_aligned_bases, delta.al_pf_hq_aligned_q20_bases,
delta.al_pf_aligned_bases, delta.al_pf_mismatch_rate,
delta.al_pct_chimeras,
delta.al_pct_adapter,
delta.ap_bad_cycles, delta.ap_mean_read_length,
delta.ap_pct_pf_reads, delta.ap_pct_pf_reads_aligned, delta.ap_pct_reads_aligned_in_pairs,
delta.ap_pct_strand_balance, delta.ap_pf_hq_aligned_bases, delta.ap_pf_hq_aligned_q20_bases,
delta.ap_pf_hq_aligned_reads, delta.ap_pf_hq_median_mismatches, delta.ap_pf_hq_error_rate,
delta.ap_pf_noise_reads, delta.ap_pf_reads, delta.ap_pf_reads_aligned, delta.ap_reads_aligned_in_pairs,
delta.ap_total_reads, delta.ap_pf_aligned_bases, delta.ap_pf_mismatch_rate,
delta.ap_pct_adapter,
delta.anp_bad_cycles,
delta.anp_mean_read_length, delta.anp_pct_pf_reads, delta.anp_pct_pf_reads_aligned, delta.anp_pct_reads_aligned_in_pairs,
delta.anp_pct_strand_balance, delta.anp_pf_hq_aligned_bases, delta.anp_pf_hq_aligned_q20_bases,
delta.anp_pf_hq_aligned_reads, delta.anp_pf_hq_median_mismatches, delta.anp_pf_hq_error_rate,
delta.anp_pf_noise_reads, delta.anp_pf_reads, delta.anp_pf_reads_aligned, delta.anp_reads_aligned_in_pairs,
delta.anp_total_reads, delta.anp_pf_aligned_bases, delta.anp_pf_mismatch_rate,
delta.anp_pct_adapter,
delta.pf_reads,
delta.hs_bait_design_efficiency, delta.hs_bait_set, delta.hs_bait_territory, delta.hs_fold_80_base_penalty,
delta.hs_fold_enrichment, delta.hs_genome_size, delta.hs_library_size, delta.hs_mean_bait_coverage,
delta.hs_mean_target_coverage, delta.hs_near_bait_bases, delta.hs_off_bait_bases, delta.hs_on_bait_bases,
delta.hs_on_bait_vs_selected, delta.hs_on_target_bases, delta.hs_pct_off_bait, delta.hs_pct_pf_reads,
delta.hs_pct_pf_uq_reads, delta.hs_pct_pf_uq_reads_aligned, delta.hs_pct_selected_bases,
delta.hs_pct_target_bases_10x, delta.hs_pct_target_bases_20x, delta.hs_pct_target_bases_2x,
delta.hs_pct_target_bases_30x,
delta.hs_pct_target_bases_40x,
delta.hs_pct_target_bases_50x,
delta.hs_pct_target_bases_100x,
delta.hs_pct_usable_bases_on_bait, delta.hs_pct_usable_bases_on_target,
delta.hs_pf_unique_reads, delta.hs_pf_uq_bases_aligned, delta.hs_pf_uq_reads_aligned, delta.hs_target_territory,
delta.hs_total_reads, delta.hs_zero_cvg_targets_pct, delta.sample_hs_pct_target_bases_20x,
delta.snp_num_in_dbsnp, delta.snp_pct_dbsnp, delta.snp_total_snps,
delta.initiative_name,

delta.hs_penalty_10x, delta.hs_penalty_20x,
delta.hs_penalty_30x,
delta.hs_penalty_40x,
delta.hs_penalty_50x,
delta.hs_penalty_100x,
delta.rna_pf_aligned_bases, delta.rna_ribosomal_bases, delta.rna_coding_bases,
delta.rna_utr_bases, delta.rna_intronic_bases, delta.rna_intergenic_bases, delta.rna_correct_strand_reads,
delta.rna_incorrect_strand_reads, delta.rna_pct_ribosomal_bases, delta.rna_pct_coding_bases,
delta.rna_pct_utr_bases, delta.rna_pct_intronic_bases, delta.rna_pct_intergenic_bases, delta.rna_pct_mrna_bases,
delta.rna_pct_correct_strand_reads, delta.rna_pf_bases, delta.rna_pct_usable_bases, delta.rna_median_cv_coverage,
delta.rna_median_5prime_bias, delta.rna_median_3prime_bias, delta.rna_median_5prim_to_3prim_bias,
delta.ins_median_insert_size, delta.ins_min_insert_size, delta.ins_max_insert_size, delta.ins_mean_insert_size,
delta.ins_standard_deviation, delta.ins_read_pairs, delta.ins_width_of_10_percent, delta.ins_width_of_20_percent,
delta.ins_width_of_30_percent, delta.ins_width_of_40_percent, delta.ins_width_of_50_percent,
delta.ins_width_of_60_percent, delta.ins_width_of_70_percent, delta.ins_width_of_80_percent,
delta.ins_width_of_90_percent, delta.ins_width_of_99_percent, delta.ins_pair_orientation,
delta.pcr_custom_amplicon_set, delta.pcr_genome_size, delta.pcr_amplicon_territory, delta.pcr_target_territory,
delta.pcr_total_reads, delta.pcr_pf_reads, delta.pcr_pf_unique_reads, delta.pcr_pct_pf_reads, delta.pcr_pct_pf_uq_reads,
delta.pcr_pf_uq_reads_aligned, delta.pcr_pct_pf_uq_reads_aligned, delta.pcr_pf_uq_bases_aligned,
delta.pcr_on_amplicon_bases, delta.pcr_near_amplicon_bases, delta.pcr_off_amplicon_bases,
delta.pcr_on_target_bases, delta.pcr_pct_amplified_bases, delta.pcr_pct_off_amplicon, delta.pcr_on_amplicon_vs_selected,
delta.pcr_mean_amplicon_coverage, delta.pcr_mean_target_coverage, delta.pcr_fold_enrichment,
delta.pcr_zero_cvg_targets_pct, delta.pcr_fold_80_base_penalty, delta.pcr_pct_target_bases_2x,
delta.pcr_pct_target_bases_10x, delta.pcr_pct_target_bases_20x, delta.pcr_pct_target_bases_30x,
delta.pcr_at_dropout, delta.pcr_gc_dropout, delta.pct_contamination, delta.rrbs_reads_aligned,
delta.rrbs_non_cpg_bases, delta.rrbs_non_cpg_converted_bases, delta.rrbs_pct_noncpg_bases_convertd,
delta.rrbs_cpg_bases_seen, delta.rrbs_cpg_bases_converted, delta.rrbs_pct_cpg_bases_converted,
delta.rrbs_mean_cpg_coverage, delta.rrbs_median_cpg_coverage, delta.rrbs_reads_with_no_cpg,
delta.rrbs_reads_ignored_short, delta.rrbs_reads_ignored_mismatches,
delta.bc_pf_reads,
delta.bc_total_reads,
delta.bc_pf_bases,
delta.wgs_genome_territory,
delta.wgs_mean_coverage ,
delta.wgs_sd_coverage,
delta.wgs_median_coverage,
delta.wgs_mad_coverage,
delta.wgs_pct_exc_mapq ,
delta.wgs_pct_exc_dupe,
delta.wgs_pct_exc_unpaired   ,
delta.wgs_pct_exc_baseq ,
delta.wgs_pct_exc_overlap,
delta.wgs_pct_exc_capped ,
delta.wgs_pct_exc_total,
delta.wgs_pct_5x,
delta.wgs_pct_10x,
delta.wgs_pct_20x,
delta.wgs_pct_30x,
delta.wgs_pct_40x,
delta.wgs_pct_50x,
delta.wgs_pct_60x,
delta.wgs_pct_70x,
delta.wgs_pct_80x,
delta.wgs_pct_90x,
delta.wgs_pct_100x,
delta.min_lod,
delta.max_lod,
delta.lcset_type,
delta.wgs_pct_15x,
delta.wgs_pct_25x,

delta.rwgs_genome_territory,
delta.rwgs_mean_coverage ,
delta.rwgs_sd_coverage,
delta.rwgs_median_coverage,
delta.rwgs_mad_coverage,
delta.rwgs_pct_exc_mapq ,
delta.rwgs_pct_exc_dupe,
delta.rwgs_pct_exc_unpaired   ,
delta.rwgs_pct_exc_baseq ,
delta.rwgs_pct_exc_overlap,
delta.rwgs_pct_exc_capped ,
delta.rwgs_pct_exc_total,
delta.rwgs_pct_5x,
delta.rwgs_pct_10x,
delta.rwgs_pct_20x,
delta.rwgs_pct_30x,
delta.rwgs_pct_40x,
delta.rwgs_pct_50x,
delta.rwgs_pct_60x,
delta.rwgs_pct_70x,
delta.rwgs_pct_80x,
delta.rwgs_pct_90x,
delta.rwgs_pct_100x,
delta.rwgs_pct_15x,
delta.rwgs_pct_25x,
delta.lcset_protocol,
delta.lcset_seq_technology,
delta.lcset_topoff,

? /*SOURCE*/
, DELTA.pdo_title,
DELTA.ap_pf_indel_rate,
DELTA.anp_pf_indel_rate,
DELTA.bsp_original_material_type,
DELTA.bsp_root_material_type,
DELTA.n_hiseq_pool_test_lanes,
DELTA.n_aggregated_rg,
DELTA.wgs_pct_1x,
DELTA.wgs_het_snp_sensitivity,
DELTA.wgs_het_snp_q,
DELTA.processing_location ,
DELTA.sample_type,
DELTA.index_type,
DELTA.sample_lod,
DELTA.hs_at_dropout,
delta.lcset_creation_max


)
WHERE DELTA.is_latest<>0  --=1

WHEN MATCHED THEN
UPDATE
SET tr.timestamp=SYSDATE,
    tr.product_order_key            = decode(delta.is_latest, 0, 'DELETE', delta.product_order_key),
    tr.pdo_title                    = delta.pdo_title,
    tr.product                      = delta.product,
    tr.product_part_number          = delta.product_part_number,
    tr.product_order_sample         = delta.product_order_sample,
    tr.research_project_name        = delta.research_project_name,
    tr.research_project_number      = delta.research_project_number,
    tr.individual_name              = delta.individual_name,
    tr.on_risk                      = delta.on_risk,
    tr.risk_types                   = delta.risk_types,
    tr.sample_ids                   = delta.sample_ids,
    tr.bsp_original_material_type   = delta.bsp_original_material_type,
    tr.bsp_root_material_type       = delta.bsp_root_material_type,
    tr.sample_type                  = delta.sample_type,
    tr.index_type                   = delta.index_type,

    tr.lsid                         = delta.lsid,
    tr.lcset                        = delta.lcset,
    tr.lcset_type                   = delta.lcset_type,
    tr.lcset_protocol               = delta.lcset_protocol,
    tr.lcset_seq_technology         = delta.lcset_seq_technology,
    tr.lcset_topoff                 = delta.lcset_topoff,
    tr.lcset_creation_max           = delta.lcset_creation_max,
    tr.workflow                     = delta.workflow,
    tr.analysis_type                = delta.analysis_type,
    tr.n_lanes                      = delta.n_lanes,
    tr.n_aggregated_rg              = delta.n_aggregated_rg,
    tr.aggregated_lanes             = delta.aggregated_lanes,
    tr.n_hiseq_pool_test_lanes      = delta.n_hiseq_pool_test_lanes,
    tr.wr_id                        = delta.wr_id,
    tr.initiative_name              = delta.initiative_name,
    tr.min_lod                      = delta.min_lod,
    tr.max_lod                      = delta.max_lod,

    tr.gssr_id                      = delta.gssr_ids,
    tr.last_run_end_date            = delta.last_run_end_date,
    tr.processing_location          = delta.processing_location
DELETE WHERE tr.product_order_key = 'DELETE'
"""
}